library(ComplexHeatmap)
library(RColorBrewer)
library(circlize)
library(ggplot2)
library("DESeq2", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(reshape2)
library(dplyr)
library(scales)
library(RColorBrewer)
library(tidyr)
library(shiny)

#Read output of kallisto

all<-read.delim("kallisto_all_organs.gene.counts.matrix", header = TRUE,row.names = "X")

col_order_all<-c("ANGQ3_kallisto_167752.1","ANG_Q5_kallisto_167754.1","ANGS13_kallisto_167742.1","ANGS15_kallisto_167750.1","ANGS9_kallisto_167756.1","Br_kallisto_190909.1","Br_kallisto_190914.1","Br_kallisto_190921.1","CC_kallisto_190908.1","CC_kallisto_190917.1","CC_kallisto_190920.1","CCQ3_kallisto_167753.1","CC_Q5_kallisto.1","CCS13_kallisto_167743.1","CCS15_kallisto_167751.1","Gill_kallisto_167718.1","Gill_kallisto_167732.1","Gill_kallisto_190919.1","Gills_S13_kallisto_167739.1","gills_T2_kallisto_190964.1","GillU2_kallisto_190928.1","Mant_kallisto_190853.1","Mant_kallisto_190910.1","Mant_kallisto_190922.1","Mant_kallisto_190931.1","OL_kallisto_167722.1","OL_kallisto_167728.1","OL_kallisto_167736.1","OL_kallisto_167745.1","OL_kallisto_190906.1","OL_kallisto_190935.1","Ov_kallisto_167741.1","Ov_kallisto_167749.1","Ov_kallisto_190934.1","skin_kallisto_190904.1","skin_kallisto_190912.1","skin_kallisto_190924.1","skin_kallisto_190933.1","T16_ANG_kallisto_190949.1","T16_CC_kallisto_190950.1","T21_ANG_kallisto_190952.1","T21_CC_kallisto_190953.1","T2_ANG_kallisto_190943.1","T2_CC_kallisto_190944.1","T4_ANG_kallisto_190945.1","T4_CC_kallisto_190946.1","T5_ANG_kallisto_190947.1","T5_CC_kallisto_190948.1","U2_ANG_kallisto_190929.1","U2_CC_kallisto_190930.1","U3_ANG_kallisto_190937.1","U3_CC_kallisto_190938.1")

cts_all=all[rowSums(all[])>0, ]
cts_all=ceiling(cts_all)
View(cts_all)
sampleinfo_all<-read.delim("sample_data_all.txt")

#Create Deseq object
dds_a<-DESeqDataSetFromMatrix(countData = cts_all,colData = sampleinfo_all, design=~SymState)
dds_deseq_all <- DESeq(dds_a)
keep_all <- rowSums(counts(dds_deseq_all) >= 10)>=3
dds_deseq_all <- dds_deseq_all[keep_all,]

#Calculate the variance for each gene
variances_1 <- apply(assay(dds_deseq_all), 1, var)

# Determine the upper quartile variance cutoff value
upper_var1 <- quantile(variances_1, 0.75)

# Filter the data choosing only genes whose variances are in the upper quartile
df_by_var1 <- data.frame(assay(dds_deseq_all)) %>%
  dplyr::filter(variances_1 > upper_var1)

heatmap2 <- pheatmap(
  df_by_var1,
  cluster_rows = TRUE, # Cluster the rows of the heatmap (genes in this case)
  cluster_cols = TRUE, # Cluster the columns of the heatmap (samples),
  show_rownames = FALSE, # There are too many genes to clearly show the labels
  main = "Variance Heatmap",
  annotation_col = sampleinfo2,annotation_colors = my_colour,
  colorRampPalette(c(
    "deepskyblue",
    "black",
    "yellow"
  ))(25
  ),
  scale = "row" # Scale values in the direction of genes (rows)
)

res_all<-results(dds_deseq_all, contrast=c("sample", "ANG", "CC"),alpha=0.05)

summary(res_all)
# out of 46585 with nonzero total read count
# adjusted p-value < 0.05
# LFC > 0 (up)       : 8044, 17%
# LFC < 0 (down)     : 15930, 34%
# outliers [1]       : 0, 0%
# low counts [2]     : 10, 0.021%

#Normalize
vsd_all <- vst(dds_deseq_all)

#example of other normalization used for comparison
rld <- rlog(dds, blind=FALSE)
rld_pheatmap<-pheatmap(assay(rld)[select,], cluster_rows=FALSE, show_rownames=FALSE,
                       cluster_cols=FALSE, annotation_col=df)
dds2 <- estimateDispersions(dds)
dds2 <- nbinomWaldTest(dds)

# For batch effect
assay(vsd_all) <- limma::removeBatchEffect(assay(vsd_all), vsd_all$batch)

pcaData<-plotPCA(vsd_all,intgroup=c("sample"),returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
group_sex<-sampleinfo_all$Sex
group_sex<-factor(group_sex)
group_sample<-sampleinfo_all$sample
group_sample<-factor(group_sample)
pca_all<-ggplot(pcaData, aes(PC1, PC2, color=group_sample,shape=group_sex))+
  geom_point(size=5) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) +
  geom_point(aes(fill=group_sample,shape=group_sex),size=5,colour="black")+
  theme_bw()+theme(axis.text = element_text(size=12),legend.text = element_text(size=12),legend.key.size = unit(2,"lines"))+
  scale_shape_manual(values=c(21,24))+scale_fill_manual(values=Okabe_Ito)+
  guides(fill = guide_legend(override.aes = list(color = Okabe_Ito)))

pca_all
p1<-pca_all+ggforce::geom_mark_ellipse(aes(color = group_sample))

# To make plot with transparent background for ppts
pca_all_b=pca_all+theme(
  panel.background = element_rect(fill='transparent'),
  plot.background = element_rect(fill='transparent', color=NA),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  legend.background = element_rect(fill='transparent'),
  legend.box.background = element_rect(fill='transparent'),axis.line = element_line(color="white"),axis.text = element_text(colour = "white",size=25),axis.title = element_text(colour = "white",size=30)
)
ggsave('PCA_all_nobg.png', pca_all_b, bg='transparent')

#Violin plot for filtered and normalized data
myCPM<-cpm(cts)
keepers<-rowSums(myCPM>1)>=5
myDGElist.f<-y_counts[keepers,]
myDGElist.f.norm<-calcNormFactors(myDGElist.f,method = "TMM")
log2.cpm.f.norm<-cpm(myDGElist.f.norm,log=TRUE)
log2.cpm.f.norm.df<-as_tibble(log2.cpm.f.norm,rownames="transcript_id")
log2.cpm.f.pivot<-pivot_longer(log2.cpm.f.norm.df,cols = kallisto_quant_190943:kallisto_quant_CCQ3,names_to = "Samples",values_to = "expression")
v2<-ggplot(log2.cpm.f.pivot)+aes(x=Samples,y=expression,fill=Samples)+geom_violin(trim=FALSE,show.legend = FALSE)+stat_summary(fun="median",geom="point",shape=95,size=10,color="black",show.legend = FALSE)+labs(y="log2 expression",x="sample",title = "Log2 Transcripts per million",subtitle = "filtered,normalized",caption=paste0("produced on",Sys.time()))+theme_bw()

#to make violin plot, whats the distribution of the data
v1<-ggplot(log2.cpm.df.pivot)+aes(x=Samples,y=expression,fill=Samples)+geom_violin(trim=FALSE,show.legend = FALSE)+stat_summary(fun="median",geom="point",shape=95,size=10,color="black",show.legend = FALSE)+labs(y="log2 expression",x="sample",title = "Log2 Transcripts per million",subtitle = "unfiltered,non-normalized",caption=paste0("produced on",Sys.time()))+theme_bw()


#Convert to data frame
df_res_all<-as.data.frame(res_all)

#Creating heatmap for most differentially expressed
df_res_all_05<-df_res_all[(df_res_all$padj<0.05) & (abs(df_res_all$log2FoldChange)>2),] #Filtering data based on colValues: High expression and no-log fold change

df_res_all<-df_res_all_05[order(df_res_all_05$log2FoldChange,decreasing = TRUE),] #ordering the data
View(df_res_all)

mat_res_all<-assay(vsd_all)[rownames(df_res_all),rownames(sampleinfo2)] #might have to reload sampleinfo so rownames are ID
colnames(mat_res_all)<-rownames(sampleinfo2)
base_mean<-rowMeans(mat_res_all)
mat.scaled.all<-t(apply(mat_res_all,1,scale))
colnames(mat.scaled.all)<-colnames(mat_res_all)

num_keep<-100 #keeping top and bottom 25 genes
rows_keep<-c(seq(1:num_keep),seq((nrow(mat.scaled.all)-num_keep),nrow(mat.scaled.all)))

my_colour2 = list(
  Time = c(Sym = "#FCD603", Non = "#735d80")
)


#TO make volcano plot
threshold<- df_res_all$padj< 0.05 & abs(df_res_all$log2FoldChange) > 0.58
ggplot(df_res_all)+geom_point(aes(x=log2FoldChange,y=-log10(padj),color=threshold))+theme_bw()

ggplot(anno_all) +
  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
  geom_text_repel(aes(x = log2FoldChange, y = -log10(padj), label = ifelse(eggnog == T, rownames(anno_all),""))) +
  ggtitle("overexpression") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25))) 

#Upset plot https://rnabio.org/module-03-expression/0003/05/01/Batch-Correction/
library("UpSetR")
sample_names = names(cts)[1:length(names(cts))]
conditions=c("ANG","ANG","ANG","ANG","ANG","ANG","ANG","ANG","ANG","CC","CC","CC","CC","CC","CC","CC","CC","CC","gill","gill","gill")
batch=c("Two","Two","One","Two","Two","Two","One","One","One","Two","Two","One","Two","Two","Two","One","One","One","Two","Two","Two")
replicates=c(1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3)
pca_uncorrected_obj = prcomp(cts[,sample_names])
pca_uncorrected = as.data.frame(pca_uncorrected_obj[2]$rotation)
pca_uncorrected[,"condition"] = conditions
pca_uncorrected[,"batch"] = batch
pca_uncorrected[,"replicate"] = replicates
cols <- c("ANG" = "#481567FF", "CC" = "#1F968BFF","gill"="pink")
p1 = ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch))

#Identify functional annotations of Deseq results
df_res_all<-tibble::rownames_to_column(df_res_all,"Row.names")
View(df_res_all)
annos <- read.delim("Trinotate.xls", header = TRUE)
annos_all<-merge(df_res_ang_ed,annos,by.x="Row.names",by.y="X.gene_id")
View(annos_all)
write.csv(anno_all,"annotated_deseq_all.csv")


